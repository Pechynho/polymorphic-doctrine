<?php

namespace Pechynho\PolymorphicDoctrine;

use Closure;
use Pechynho\PolymorphicDoctrine\DependencyInjection\CompilerPass\PolymorphicCompilerPass;
use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

final class PechynhoPolymorphicDoctrineBundle extends AbstractBundle
{
    private ?Closure $autoloader = null;

    public function configure(DefinitionConfigurator $definition): void
    {
        $definition->rootNode()
            ->children()
                ->stringNode('references_directory')
                    ->defaultValue('%kernel.cache_dir%/pechynho/polymorphic-doctrine/references')
                ->end()
                ->stringNode('references_namespace')
                    ->defaultValue('Pechynho\PolymorphicDoctrine\AutogeneratedReference')
                ->end()
                ->arrayNode('discover')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->stringNode('cache_directory')
                            ->defaultValue('%kernel.cache_dir%/pechynho/polymorphic-doctrine/discover')
                        ->end()
                        ->arrayNode('directories')
                            ->prototype('scalar')->end()
                            ->defaultValue(['%kernel.project_dir%/src'])
                        ->end()
                    ->end()
                ->end()
            ->end();
    }

    public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void
    {
        $container->import(__DIR__ . '/../config/services.yaml');
        $container
            ->parameters()
            ->set('pechynho.polymorphic_doctrine.references_directory', $config['references_directory'])
            ->set('pechynho.polymorphic_doctrine.references_namespace', $config['references_namespace'])
            ->set('pechynho.polymorphic_doctrine.discover.cache_directory', $config['discover']['cache_directory'])
            ->set('pechynho.polymorphic_doctrine.discover.directories', $config['discover']['directories']);
    }

    public function build(ContainerBuilder $container): void
    {
        $container->addCompilerPass(new PolymorphicCompilerPass());
    }

    public function boot(): void
    {
        if (!$this->container->hasParameter('pechynho.polymorphic_doctrine.references_directory')) {
            return;
        }
        $referencesDir = $this->container->getParameter('pechynho.polymorphic_doctrine.references_directory');
        $fs = new Filesystem();
        if (!$fs->exists($referencesDir)) {
            $fs->mkdir($referencesDir, 0o755);
        }
        $this->autoloader = PolymorphicAutoloader::register(
            referencesDir: $referencesDir,
            referencesNamespace: $this->container->getParameter('pechynho.polymorphic_doctrine.references_namespace'),
        );
    }

    public function shutdown(): void
    {
        if ($this->autoloader !== null) {
            spl_autoload_unregister($this->autoloader);
            $this->autoloader = null;
        }
    }
}
